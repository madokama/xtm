;; Examples:
;; < c e g >   ; Angle bracketed notes with or without spaces around brackets.
;; <c e g>
;; <c e g>4 q2 ; Chord repeat with `q' plus optional duration.

(define lily-chord-matcher
  (lambda (mexp)
    (or (memq mexp '(< q))
        (lily-chord-repeat? mexp))))

(define lily-chord-repeat?
  (lambda (mexp)
    (lily-symbol-peek? mexp #\q)))

(define lily-parse-chord
  (lambda (cmd prev mexp k)
    (if (lily-chord-repeat? cmd)
        (let ((chord (lily-copy prev)))
          (aif (lily-parse-dur (symbol->string cmd))
               (lily-duration! chord it))
          (k chord chord mexp))
        (lily-parse-brackets
         (cons cmd mexp) '< '>
         (lambda (notes attr mexp)
           (let ((chord
                  (make-lily-chord 'notes (lily-serialize-notes prev notes)
                                   'attr attr)))
             (lily-duration! chord
                             (or (lily-parse-dur attr)
                                 (lily-duration prev)))
             (let ((chord (lily-apply-attr chord attr)))
               (k chord chord mexp))))))))

(set! lily-command-alist
      (cons (cons lily-parse-chord lily-chord-matcher) lily-command-alist))
