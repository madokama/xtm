
(macro if-let
  (lambda (form)
    (apply (lambda (if-let bindings then else)
             (let loop ((bindings (if (pair? (car bindings))
                                      bindings
                                      (list bindings)))
                        (flag #f))
               (if (null? bindings)
                   (if flag then else)
                   `(let (,(car bindings))
                      (if (and ,(caar bindings)
                               (not (null? ,(caar bindings))))
                          ,(loop (cdr bindings) #t)
                          ,(loop '() #f))))))
           form)))

(macro (when-let form)
  `(if-let ,(cadr form) (begin ,@(cddr form)) #f))

(macro aif
  (lambda (form)
    (apply (lambda (aif test then . else)
             `(if-let (it ,test)
                ,then
                ,(if (pair? else)
                     (car else)
                     #f)))
           form)))

(macro awhen
  (lambda (form)
    (apply (lambda (awhen test . body)
             `(aif ,test (begin ,@body) #f))
           form)))

(macro seq-let
  (lambda (form)
    (apply (lambda (seq-let vars seq . body)
             (letrec ((seq-var (gensym))
                      (collect
                       (lambda (tr acc)
                         (cond ((null? tr) acc)
                               ((symbol? tr) (cons tr acc))
                               ((pair? tr)
                                (collect (car tr)
                                         (collect (cdr tr) acc)))))))
               `(let (,@(map (lambda (v)
                              (list v #f))
                            (collect vars '()))
                      (,seq-var ,seq))
                  (if (pair? ,seq-var)
                      (begin
                        ,(let loop ((vars vars))
                           (cond ((symbol? vars)
                                  `(set! ,vars ,seq-var))
                                 ((pair? vars)
                                  `(when (pair? ,seq-var)
                                     (set! ,(car vars) (car ,seq-var))
                                     (set! ,seq-var (cdr ,seq-var))
                                     ,(loop (cdr vars))))))
                        ,@body)
                      #f))))
           form)))

;;;

(define identity (lambda (x) x))

(define constantly
  (lambda (x)
    (lambda _ x)))

(define ignore (constantly #f))

(define compose
  (lambda fs
    (cl:reduce (lambda (f g)
                 (lambda x
                   (f (apply g x))))
               fs)))

(define partial
  (lambda (f . fixed)
    (lambda args
      (apply f (append fixed args)))))

(define negate
  (lambda (f)
    (lambda args
      (not (apply f args)))))

(define orf
  (lambda fs
    (lambda x
      (cl:some (lambda (f)
                 (apply f x))
               fs))))

(define nth
  (lambda (n lst)
    (let loop ((n n) (lst lst))
      (cond ((null? lst) #f)
            ((= n 0) (car lst))
            (else (loop (pred n) (cdr lst)))))))

(define string-empty?
  (lambda (str)
    (zero? (string-length str))))

