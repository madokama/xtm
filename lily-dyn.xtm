;; Examples:
;; c4\pp            ; pianissimo
;; c4\< ... g\ff    ; crescendo

(define lily-map-dyn
  (let* ((dyn '(\sf \fffff \ffff \fff \ff \f \mf \mp \p \pp \ppp \pppp \ppppp))
         (step (/ (- 2.718281828459045 1) (length dyn))))
    (map (lambda (d n)
           (cons d (* 127 (log n))))
         dyn
         (foldl (lambda (acc _)
                  (cons (+ step (car acc)) acc))
                '(1)
                (range (length dyn))))))

(define lily-apply-dyn
  (lambda (note dyn)
    (awhen (assq dyn lily-map-dyn)
      (lily-volume! note (cdr it))
      note)))

(set! lily-attr-handlers (cons lily-apply-dyn lily-attr-handlers))

;;; Crescendo

(define lily-cresc-matcher
  (lambda (mexp)
    (and (symbol? mexp)
         (cl:some (lambda (attr)
                    (memq attr '(\< \>)))
                  (lily-parse-lattr (symbol->string mexp))))))

(define lily-cresc-slope
  ;; Crescendo as linear function of time
  (lambda (phrase stop)
    (/ (- stop
          (lily-volume (car (lily-notes phrase))))
       (lily-duration phrase))))

(define lily-apply-cresc
  (lambda (phrase stop)
    (let* ((notes (lily-notes phrase))
           (slope (lily-cresc-slope phrase stop))
           (y (lily-volume (car notes))))
      (let loop ((time (lily-duration (car notes)))
                 (notes notes))
        (when (pair? notes)
          (let ((note (car notes)))
            (if (lily-phrase? note)
                (loop ;; Reduce jump in dynamics.
                      (- time (lily-duration (car (lily-notes note))))
                      (lily-notes note))
                (lily-volume! note (+ y (* slope time))))
            (loop (+ time (lily-duration note))
                  (cdr notes))))))
    phrase))

(define lily-parse-cresc
  (lambda (cmd prev mexp k)
    (let loop ((mexp mexp) (notes '()))
      (let* ((note (car mexp))
             (stop (and (symbol? note)
                        (cl:some (lambda (attr)
                                   (aif (assq attr lily-map-dyn)
                                        (cdr it)))
                                 (lily-parse-lattr (symbol->string note))))))
        (if stop
            (k (lily-apply-cresc (lily-parse-phrase
                                  prev
                                  ;; Need to parse note (cmd) here to
                                  ;; avoid infinite loop.
                                  (cons (lily-parse-symbol prev cmd)
                                        (reverse (cons note notes))))
                                 stop)
               prev
               (cdr mexp))
            (loop (cdr mexp) (cons note notes)))))))

(set! lily-command-alist
      (cons (cons lily-parse-cresc lily-cresc-matcher) lily-command-alist))
